// <auto-generated>
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using cpModel.Interfaces;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;

namespace cpModel.Models
{
    public partial class LotItp: ITrackableEntity, IReplicableEntity, ILockableEntity
    {
        public Guid? UniqueId { get; set; }
        public string HrId { get; set; }
        public int? CreatedBy { get; set; }
        public DateTime? CreatedOn { get; set; }
        public int? ModifiedBy { get; set; }
        public DateTime? ModifiedOn { get; set; }
        public bool? IsSoftDeleted { get; set; }
        public int LotItpId { get; set; }
        public int? LotId { get; set; }
        public int? ItpId { get; set; }
        public int? RaisedById { get; set; }
        public string Description { get; set; }
        public decimal? LotQuantity { get; set; }
        public string Unit { get; set; }
        public int? ApprovedById { get; set; }
        public DateTime? DateApproved { get; set; }
        public string ApprovalComments { get; set; }
        public int? CheckedById { get; set; }
        public DateTime? DateChecked { get; set; }
        public int? VerifiedById { get; set; }
        public DateTime? DateVerified { get; set; }
        public decimal? LotLength { get; set; }
        public decimal? LotArea { get; set; }
        public decimal? LotVolume { get; set; }
        public DateTime? RevisionDate { get; set; }
        public int? RevisionId { get; set; }
        public DateTime? ChecklistDate { get; set; }
        public string SourceItpNo { get; set; }
        public string SourceQvcNo { get; set; }
        public int? Priority { get; set; }

        [ConcurrencyCheck]
        public int? OptimisticLockField { get; set; }

        // Reverse navigation
        public virtual ICollection<ChecklistUser> ChecklistUsers { get; set; }
        public virtual ICollection<LotItpDetail> LotItpDetails { get; set; }
        public virtual ICollection<LotItpQty> LotItpQties { get; set; }
        public virtual ICollection<LotItpUser> LotItpUsers { get; set; }

        public virtual Itp Itp { get; set; }
        public virtual Lot Lot { get; set; }
        public virtual User ApprovedBy { get; set; }
        public virtual User CheckedBy { get; set; }
        public virtual User RaisedBy { get; set; }
        public virtual User VerifiedBy { get; set; }

        public LotItp()
        {
            ChecklistUsers = new HashSet<ChecklistUser>();
            LotItpDetails = new HashSet<LotItpDetail>();
            LotItpQties = new HashSet<LotItpQty>();
            LotItpUsers = new HashSet<LotItpUser>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>

