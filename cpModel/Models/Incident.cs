// <auto-generated>
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using cpModel.Interfaces;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;

namespace cpModel.Models
{
    public partial class Incident: ITrackableEntity, IReplicableEntity, ILockableEntity
    {
        public Guid? UniqueId { get; set; }
        public string HrId { get; set; }
        public int? CreatedBy { get; set; }
        public DateTime? CreatedOn { get; set; }
        public int? ModifiedBy { get; set; }
        public DateTime? ModifiedOn { get; set; }
        public bool? IsSoftDeleted { get; set; }
        public int IncidentId { get; set; }
        public int? IncidentNo { get; set; }
        public int? RaisedById { get; set; }
        public int? IncidentTypeId { get; set; }
        public DateTime? IncidentDate { get; set; }
        public int? ProjectId { get; set; }
        public decimal? LtiHours { get; set; }
        public decimal? EstCost { get; set; }
        public string Location { get; set; }
        public int? ReportedById { get; set; }
        public int? ReportedToId { get; set; }
        public bool? ReportReqdFromSubbie { get; set; }
        public DateTime? DateHseAdvised { get; set; }
        public string DescriptionHtml { get; set; }
        public string CauseIncidentHtml { get; set; }
        public string WeatherConditions { get; set; }
        public bool? CoveredBySwms { get; set; }
        public string SwmsReference { get; set; }
        public string ActionsHtml { get; set; }
        public string ActionsPreventReoccurrenceHtml { get; set; }
        public int? ApprovedById { get; set; }
        public DateTime? ApprovedDate { get; set; }
        public string ApprovedCommentsHtml { get; set; }
        public int? CloseoutById { get; set; }
        public DateTime? CloseOutDate { get; set; }
        public string CloseOutCommentsHtml { get; set; }
        public int? SiteDiaryId { get; set; }

        [ConcurrencyCheck]
        public int? OptimisticLockField { get; set; }

        // Reverse navigation
        public virtual ICollection<CnIncident> CnIncidents { get; set; }
        public virtual ICollection<FsIncident> FsIncidents { get; set; }
        public virtual ICollection<IncidentPerson> IncidentPersons { get; set; }
        public virtual ICollection<PhotoIncident> PhotoIncidents { get; set; }

        public virtual IncidentType IncidentType { get; set; }
        public virtual Project Project { get; set; }
        public virtual SiteDiary SiteDiary { get; set; }
        public virtual User ApprovedBy { get; set; }
        public virtual User CloseoutBy { get; set; }
        public virtual User RaisedBy { get; set; }
        public virtual User ReportedBy { get; set; }
        public virtual User ReportedTo { get; set; }

        public Incident()
        {
            CnIncidents = new HashSet<CnIncident>();
            FsIncidents = new HashSet<FsIncident>();
            IncidentPersons = new HashSet<IncidentPerson>();
            PhotoIncidents = new HashSet<PhotoIncident>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>

