// <auto-generated>
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using cpModel.Interfaces;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;

namespace cpModel.Models
{
    public partial class FileStoreDoc: ITrackableEntity, IReplicableEntity, ILockableEntity
    {
        public Guid? UniqueId { get; set; }
        public string HrId { get; set; }
        public int? CreatedBy { get; set; }
        public DateTime? CreatedOn { get; set; }
        public int? ModifiedBy { get; set; }
        public DateTime? ModifiedOn { get; set; }
        public bool? IsSoftDeleted { get; set; }
        public int FileStoreDocId { get; set; }
        public int? FilestoreDocNo { get; set; }
        public DateTime? FileDate { get; set; }
        public string Description { get; set; }
        public string Filename { get; set; }
        public string FilenameOriginal { get; set; }
        public int? ProjectId { get; set; }
        public int? LotMapSectionId { get; set; }
        public bool? IsInvoice { get; set; }

        [ConcurrencyCheck]
        public int? OptimisticLockField { get; set; }

        // Reverse navigation
        public virtual ICollection<FsApproval> FsApprovals { get; set; }
        public virtual ICollection<FsAtp> FsAtps { get; set; }
        public virtual ICollection<FsControlLine> FsControlLines { get; set; }
        public virtual ICollection<FsDoc> FsDocs { get; set; }
        public virtual ICollection<FsEmail> FsEmails { get; set; }
        public virtual ICollection<FsIncident> FsIncidents { get; set; }
        public virtual ICollection<FsInstruction> FsInstructions { get; set; }
        public virtual ICollection<FsInvoice> FsInvoices { get; set; }
        public virtual ICollection<FsItp> FsItps { get; set; }
        public virtual ICollection<FsLot> FsLots { get; set; }
        public virtual ICollection<FsLotQty> FsLotQties { get; set; }
        public virtual ICollection<FsNcr> FsNcrs { get; set; }
        public virtual ICollection<FsNotice> FsNotices { get; set; }
        public virtual ICollection<FsNotification> FsNotifications { get; set; }
        public virtual ICollection<FsPClaimDetail> FsPClaimDetails { get; set; }
        public virtual ICollection<FsPunchlistItem> FsPunchlistItems { get; set; }
        public virtual ICollection<FsPurchaseOrder> FsPurchaseOrders { get; set; }
        public virtual ICollection<FsSupplier> FsSuppliers { get; set; }
        public virtual ICollection<FsSurvey> FsSurveys { get; set; }
        public virtual ICollection<FsTestReq> FsTestReqs { get; set; }
        public virtual ICollection<FsVariation> FsVariations { get; set; }
        public virtual ICollection<FsWorkflowLog> FsWorkflowLogs { get; set; }
        public virtual ICollection<ImageLayer> ImageLayers { get; set; }

        public virtual LotMapSection LotMapSection { get; set; }
        public virtual Project Project { get; set; }

        public FileStoreDoc()
        {
            FsApprovals = new HashSet<FsApproval>();
            FsAtps = new HashSet<FsAtp>();
            FsControlLines = new HashSet<FsControlLine>();
            FsDocs = new HashSet<FsDoc>();
            FsEmails = new HashSet<FsEmail>();
            FsIncidents = new HashSet<FsIncident>();
            FsInstructions = new HashSet<FsInstruction>();
            FsInvoices = new HashSet<FsInvoice>();
            FsItps = new HashSet<FsItp>();
            FsLots = new HashSet<FsLot>();
            FsLotQties = new HashSet<FsLotQty>();
            FsNcrs = new HashSet<FsNcr>();
            FsNotices = new HashSet<FsNotice>();
            FsNotifications = new HashSet<FsNotification>();
            FsPClaimDetails = new HashSet<FsPClaimDetail>();
            FsPunchlistItems = new HashSet<FsPunchlistItem>();
            FsPurchaseOrders = new HashSet<FsPurchaseOrder>();
            FsSuppliers = new HashSet<FsSupplier>();
            FsSurveys = new HashSet<FsSurvey>();
            FsTestReqs = new HashSet<FsTestReq>();
            FsVariations = new HashSet<FsVariation>();
            FsWorkflowLogs = new HashSet<FsWorkflowLog>();
            ImageLayers = new HashSet<ImageLayer>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>

