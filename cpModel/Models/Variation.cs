// <auto-generated>
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using cpModel.Interfaces;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;

namespace cpModel.Models
{
    public partial class Variation: ITrackableEntity, IReplicableEntity, ILockableEntity
    {
        public Guid? UniqueId { get; set; }
        public string HrId { get; set; }
        public int? CreatedBy { get; set; }
        public DateTime? CreatedOn { get; set; }
        public int? ModifiedBy { get; set; }
        public DateTime? ModifiedOn { get; set; }
        public bool? IsSoftDeleted { get; set; }
        public int VariationId { get; set; }
        public int? ProjectId { get; set; }
        public string VariationNo { get; set; }
        public string ClientRef { get; set; }
        public string Description { get; set; }
        public int? RaisedById { get; set; }
        public DateTime? DateApproved { get; set; }
        public DateTime? DateIdentified { get; set; }
        public DateTime? DateNotified { get; set; }
        public decimal? EotDays { get; set; }
        public decimal? EotDaysApproved { get; set; }
        public decimal? QtyEstimated { get; set; }
        public decimal? QtySubmitted { get; set; }
        public decimal? QtyApproved { get; set; }
        public string Unit { get; set; }
        public decimal? DjcTotalSubmitted { get; set; }
        public decimal? DjcTotalApproved { get; set; }
        public decimal? SellTotalSubmitted { get; set; }
        public decimal? SellTotalApproved { get; set; }
        public decimal? DefaultMargin { get; set; }
        public decimal? VisibleMargin { get; set; }
        public string Notes { get; set; }
        public string Detail { get; set; }
        public DateTime? DateIncludeInClaim { get; set; }
        public DateTime? DateUseApprovedValue { get; set; }

        [ConcurrencyCheck]
        public int? OptimisticLockField { get; set; }

        // Reverse navigation
        public virtual ICollection<CnVariation> CnVariations { get; set; }
        public virtual ICollection<FsVariation> FsVariations { get; set; }
        public virtual ICollection<LotQuantity> LotQuantities { get; set; }
        public virtual ICollection<PhotoVariation> PhotoVariations { get; set; }
        public virtual ICollection<ProgressClaimSnapshot> ProgressClaimSnapshots { get; set; }
        public virtual ICollection<VariationCostCode> VariationCostCodes { get; set; }
        public virtual ICollection<VariationCustomRegItem> VariationCustomRegItems { get; set; }
        public virtual ICollection<VariationEstimate> VariationEstimates { get; set; }
        public virtual ICollection<VariationLot> VariationLots { get; set; }
        public virtual ICollection<VariationSchedule> VariationSchedules { get; set; }
        public virtual ICollection<VrnInstruction> VrnInstructions { get; set; }
        public virtual ICollection<VrnWaypoint> VrnWaypoints { get; set; }

        public virtual Project Project { get; set; }
        public virtual User RaisedBy { get; set; }

        public Variation()
        {
            CnVariations = new HashSet<CnVariation>();
            FsVariations = new HashSet<FsVariation>();
            LotQuantities = new HashSet<LotQuantity>();
            PhotoVariations = new HashSet<PhotoVariation>();
            ProgressClaimSnapshots = new HashSet<ProgressClaimSnapshot>();
            VariationCostCodes = new HashSet<VariationCostCode>();
            VariationCustomRegItems = new HashSet<VariationCustomRegItem>();
            VariationEstimates = new HashSet<VariationEstimate>();
            VariationLots = new HashSet<VariationLot>();
            VariationSchedules = new HashSet<VariationSchedule>();
            VrnInstructions = new HashSet<VrnInstruction>();
            VrnWaypoints = new HashSet<VrnWaypoint>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>

