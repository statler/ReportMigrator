// <auto-generated>
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using cpModel.Interfaces;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;

namespace cpModel.Models
{
    public partial class WorkflowAction: ITrackableEntity, IReplicableEntity, ILockableEntity
    {
        public Guid? UniqueId { get; set; }
        public string HrId { get; set; }
        public int? CreatedBy { get; set; }
        public DateTime? CreatedOn { get; set; }
        public int? ModifiedBy { get; set; }
        public DateTime? ModifiedOn { get; set; }
        public bool? IsSoftDeleted { get; set; }
        public int WorkflowActionId { get; set; }
        public int? WorkflowId { get; set; }
        public int? StepFromId { get; set; }
        public int? StepToId { get; set; }
        public int? BeginConnIx { get; set; }
        public int? EndConnIx { get; set; }
        public string Text { get; set; }
        public decimal? TextPosition { get; set; }
        public decimal? Width { get; set; }
        public decimal? Height { get; set; }
        public bool? IsReqCommentary { get; set; }
        public int? PriorityOrderId { get; set; }
        public int? ActionGroupIndex { get; set; }
        public bool? AddresseeCanAction { get; set; }
        public bool? RequestorCanAction { get; set; }
        public DateTime? DateLastActioned { get; set; }
        public int? OriginId { get; set; }
        public bool? IsRequired { get; set; }
        public bool? IsNotify { get; set; }
        public bool? IsPrivate { get; set; }
        public int? ReferencePriority { get; set; }
        public decimal? MinValueForAction { get; set; }
        public int? Zindex { get; set; }

        [ConcurrencyCheck]
        public int? OptimisticLockField { get; set; }

        // Reverse navigation
        public virtual ICollection<WorkflowActionPoint> WorkflowActionPoints { get; set; }
        public virtual ICollection<WorkflowActionRole> WorkflowActionRoles { get; set; }
        public virtual ICollection<WorkflowActionUser> WorkflowActionUsers { get; set; }
        public virtual ICollection<WorkflowLog> WorkflowLogs { get; set; }

        public virtual Workflow Workflow { get; set; }
        public virtual WorkflowStep StepFrom { get; set; }
        public virtual WorkflowStep StepTo { get; set; }

        public WorkflowAction()
        {
            WorkflowActionPoints = new HashSet<WorkflowActionPoint>();
            WorkflowActionRoles = new HashSet<WorkflowActionRole>();
            WorkflowActionUsers = new HashSet<WorkflowActionUser>();
            WorkflowLogs = new HashSet<WorkflowLog>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>

