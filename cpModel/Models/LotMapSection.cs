// <auto-generated>
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using cpModel.Interfaces;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;

namespace cpModel.Models
{
    public partial class LotMapSection: ITrackableEntity, IReplicableEntity, ILockableEntity
    {
        public Guid? UniqueId { get; set; }
        public string HrId { get; set; }
        public int? CreatedBy { get; set; }
        public DateTime? CreatedOn { get; set; }
        public int? ModifiedBy { get; set; }
        public DateTime? ModifiedOn { get; set; }
        public bool? IsSoftDeleted { get; set; }
        public int LotMapSectionId { get; set; }
        public int? ProjectId { get; set; }
        public string Description { get; set; }
        public int? ControlLineId { get; set; }
        public double? ChStart { get; set; }
        public double? ChEnd { get; set; }
        public decimal? OrderId { get; set; }
        public double? ChainageIntervals { get; set; }
        public int? ImageWidth { get; set; }
        public int? ImageHeight { get; set; }
        public double? FontSize { get; set; }
        public int? CustomRegisterId { get; set; }
        public double? LeftMargin { get; set; }
        public bool? IsManuallyGenerated { get; set; }

        [ConcurrencyCheck]
        public int? OptimisticLockField { get; set; }

        // Reverse navigation
        public virtual ICollection<FileStoreDoc> FileStoreDocs { get; set; }
        public virtual ICollection<FsLot> FsLots { get; set; }
        public virtual ICollection<LotMapLayer> LotMapLayers { get; set; }
        public virtual ICollection<LotMapSectionBlock> LotMapSectionBlocks_LotMapSectionId { get; set; }
        public virtual ICollection<LotMapSectionBlock> LotMapSectionBlocks_RefLotMapSectionId { get; set; }
        public virtual ICollection<LotMapSectionLot> LotMapSectionLots { get; set; }
        public virtual ICollection<LotMapSetSection> LotMapSetSections { get; set; }

        public virtual ControlLine ControlLine { get; set; }
        public virtual CustomRegister CustomRegister { get; set; }
        public virtual Project Project { get; set; }

        public LotMapSection()
        {
            FileStoreDocs = new HashSet<FileStoreDoc>();
            FsLots = new HashSet<FsLot>();
            LotMapLayers = new HashSet<LotMapLayer>();
            LotMapSectionBlocks_LotMapSectionId = new HashSet<LotMapSectionBlock>();
            LotMapSectionBlocks_RefLotMapSectionId = new HashSet<LotMapSectionBlock>();
            LotMapSectionLots = new HashSet<LotMapSectionLot>();
            LotMapSetSections = new HashSet<LotMapSetSection>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>

