// <auto-generated>
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using cpModel.Interfaces;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;

namespace cpModel.Models
{
    public partial class TestRequestTest: ITrackableEntity, IReplicableEntity, ILockableEntity
    {
        public Guid? UniqueId { get; set; }
        public string HrId { get; set; }
        public int? CreatedBy { get; set; }
        public DateTime? CreatedOn { get; set; }
        public int? ModifiedBy { get; set; }
        public DateTime? ModifiedOn { get; set; }
        public bool? IsSoftDeleted { get; set; }
        public int TestRequestTestId { get; set; }
        public string SampleId { get; set; }
        public int? TestMethodId { get; set; }
        public int? TestRequestId { get; set; }
        public int? ScheduleId { get; set; }
        public DateTime? DateSampled { get; set; }
        public int? ControlLineId { get; set; }
        public decimal? Xref { get; set; }
        public decimal? Yref { get; set; }
        public decimal? Zref { get; set; }
        public bool? ManualOverride { get; set; }
        public string Notes { get; set; }
        public bool? TestComplete { get; set; }
        public string ComplianceReq { get; set; }
        public decimal? TestCost { get; set; }
        public decimal? TestRev { get; set; }
        public int? TestBillingStatusId { get; set; }
        public decimal? EstTurnaround { get; set; }
        public string InvoiceRef { get; set; }
        public DateTime? DateTestComplete { get; set; }
        public int? TestCompletedById { get; set; }
        public string ResultComment { get; set; }
        public int? TestResultStatus { get; set; }

        [ConcurrencyCheck]
        public int? OptimisticLockField { get; set; }

        // Reverse navigation
        public virtual ICollection<TestResult> TestResults { get; set; }

        public virtual ControlLine ControlLine { get; set; }
        public virtual ScheduleItem ScheduleItem { get; set; }
        public virtual TestMethod TestMethod { get; set; }
        public virtual TestRequest TestRequest { get; set; }
        public virtual User User { get; set; }

        public TestRequestTest()
        {
            TestResults = new HashSet<TestResult>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>

