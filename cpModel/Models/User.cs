// <auto-generated>
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using cpModel.Interfaces;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;

namespace cpModel.Models
{
    public partial class User: ITrackableEntity, IReplicableEntity, ILockableEntity
    {
        public Guid? UniqueId { get; set; }
        public string HrId { get; set; }
        public int? CreatedBy { get; set; }
        public DateTime? CreatedOn { get; set; }
        public int? ModifiedBy { get; set; }
        public DateTime? ModifiedOn { get; set; }
        public bool? IsSoftDeleted { get; set; }
        public int? ProjectId { get; set; }
        public int UserId { get; set; }
        public string Address { get; set; }
        public string ApplicationName { get; set; }
        public string Company { get; set; }
        public string Email { get; set; }
        public string Fax { get; set; }
        public string FirstName { get; set; }
        public bool? IsSubscriptionAdmin { get; set; }
        public string LastName { get; set; }
        public string Mobile { get; set; }
        public string Phone { get; set; }
        public string Position { get; set; }
        public string Postcode { get; set; }
        public string State { get; set; }
        public string Suburb { get; set; }
        public string Username { get; set; }
        public string Notes { get; set; }
        public string Password { get; set; }
        public string PasswordQuestion { get; set; }
        public string PasswordAnswer { get; set; }
        public string PasswordSalt { get; set; }
        public bool? IsApproved { get; set; }
        public DateTime? LastActivityDate { get; set; }
        public DateTime? LastLoginDate { get; set; }
        public DateTime? LastPasswordChangedDate { get; set; }
        public DateTime? CreationDate { get; set; }
        public bool? IsOnline { get; set; }
        public bool? IsLockedOut { get; set; }
        public DateTime? LastLockedOutDate { get; set; }
        public bool? InActive { get; set; }
        public bool? UseWindowsLogon { get; set; }
        public bool? IsPlatformAdmin { get; set; }
        public int? SubscriberId { get; set; }
        public string FirebaseId { get; set; }
        public string ChargifyId { get; set; }
        public DateTime? DatePasswordResetRequested { get; set; }
        public Guid? PasswordRequestToken { get; set; }
        public bool? IsExtAdmin { get; set; }
        public int? ApiForAuthId { get; set; }
        public string AlternateUserNameForAuth { get; set; }
        public int? IsUserOnExtApi { get; set; }

        [ConcurrencyCheck]
        public int? OptimisticLockField { get; set; }

        // Reverse navigation
        public virtual ICollection<Approval> Approvals_CloseOutBy { get; set; }
        public virtual ICollection<Approval> Approvals_DirectlyApprovedBy { get; set; }
        public virtual ICollection<Approval> Approvals_RequestBy { get; set; }
        public virtual ICollection<Approval> Approvals_ResponseBy { get; set; }
        public virtual ICollection<ApprovalCc> ApprovalCcs { get; set; }
        public virtual ICollection<ApprovalTo> ApprovalTos { get; set; }
        public virtual ICollection<ApprovalWorkflowAddressee> ApprovalWorkflowAddressees { get; set; }
        public virtual ICollection<Atp> Atps_RequestedBy { get; set; }
        public virtual ICollection<Atp> Atps_SentTo { get; set; }
        public virtual ICollection<AtpLot> AtpLots { get; set; }
        public virtual ICollection<ChecklistUser> ChecklistUsers { get; set; }
        public virtual ICollection<CnResponse> CnResponses_ActionCompletedById { get; set; }
        public virtual ICollection<CnResponse> CnResponses_ActionRequiredById { get; set; }
        public virtual ICollection<CnResponse> CnResponses_ResponseById { get; set; }
        public virtual ICollection<CnTo> CnTos { get; set; }
        public virtual ICollection<ContractNotice> ContractNotices_ApproveToSendById { get; set; }
        public virtual ICollection<ContractNotice> ContractNotices_CloseOutById { get; set; }
        public virtual ICollection<ContractNotice> ContractNotices_RequestById { get; set; }
        public virtual ICollection<ContractNotice> ContractNotices_RequestOnBehalfId { get; set; }
        public virtual ICollection<ContractNotice> ContractNotices_RequestToId { get; set; }
        public virtual ICollection<Distribution> Distributions { get; set; }
        public virtual ICollection<Incident> Incidents_ApprovedById { get; set; }
        public virtual ICollection<Incident> Incidents_CloseoutById { get; set; }
        public virtual ICollection<Incident> Incidents_RaisedById { get; set; }
        public virtual ICollection<Incident> Incidents_ReportedById { get; set; }
        public virtual ICollection<Incident> Incidents_ReportedToId { get; set; }
        public virtual ICollection<IncidentPerson> IncidentPersons { get; set; }
        public virtual ICollection<Instruction> Instructions_ClosedOutById { get; set; }
        public virtual ICollection<Instruction> Instructions_InstructionById { get; set; }
        public virtual ICollection<Instruction> Instructions_InstructionToId { get; set; }
        public virtual ICollection<Invoice> Invoices { get; set; }
        public virtual ICollection<Itp> Itps_ApprovedBy { get; set; }
        public virtual ICollection<Itp> Itps_PersonControl { get; set; }
        public virtual ICollection<Itp> Itps_RevisionById { get; set; }
        public virtual ICollection<Lot> Lots_ConformedBy { get; set; }
        public virtual ICollection<Lot> Lots_RaisedBy { get; set; }
        public virtual ICollection<LotItp> LotItps_ApprovedBy { get; set; }
        public virtual ICollection<LotItp> LotItps_CheckedBy { get; set; }
        public virtual ICollection<LotItp> LotItps_RaisedById { get; set; }
        public virtual ICollection<LotItp> LotItps_VerifiedBy { get; set; }
        public virtual ICollection<LotItpDetail> LotItpDetails_ApprovedBy { get; set; }
        public virtual ICollection<LotItpDetail> LotItpDetails_CheckedBy { get; set; }
        public virtual ICollection<LotItpDetail> LotItpDetails_NotApplicableById { get; set; }
        public virtual ICollection<LotItpDetail> LotItpDetails_VerifyBy { get; set; }
        public virtual ICollection<LotItpUser> LotItpUsers { get; set; }
        public virtual ICollection<LotQuantity> LotQuantities_ApprovedById { get; set; }
        public virtual ICollection<LotQuantity> LotQuantities_ManagedById { get; set; }
        public virtual ICollection<LotUser> LotUsers { get; set; }
        public virtual ICollection<Ncr> Ncrs_ApprovalBy { get; set; }
        public virtual ICollection<Ncr> Ncrs_CloseOutBy { get; set; }
        public virtual ICollection<Ncr> Ncrs_RaisedBy { get; set; }
        public virtual ICollection<Ncr> Ncrs_RevisionById { get; set; }
        public virtual ICollection<Notification> Notifications_ActionById { get; set; }
        public virtual ICollection<Notification> Notifications_NoticeById { get; set; }
        public virtual ICollection<NotificationItem> NotificationItems { get; set; }
        public virtual ICollection<NotificationTo> NotificationTos { get; set; }
        public virtual ICollection<Personnel> Personnels { get; set; }
        public virtual ICollection<ProgressClaimReview> ProgressClaimReviews_RequestedById { get; set; }
        public virtual ICollection<ProgressClaimReview> ProgressClaimReviews_ReviewCompleteById { get; set; }
        public virtual ICollection<ProgressClaimReview> ProgressClaimReviews_ReviewOwnerId { get; set; }
        public virtual ICollection<ProgressClaimSnapshot> ProgressClaimSnapshots { get; set; }
        public virtual ICollection<ProjectUser> ProjectUsers { get; set; }
        public virtual ICollection<Punchlist> Punchlists_ApprovedBy { get; set; }
        public virtual ICollection<Punchlist> Punchlists_PublishedById { get; set; }
        public virtual ICollection<Punchlist> Punchlists_RaisedBy { get; set; }
        public virtual ICollection<PunchlistItem> PunchlistItems_ApprovedBy { get; set; }
        public virtual ICollection<PunchlistItem> PunchlistItems_CheckBy { get; set; }
        public virtual ICollection<PunchlistItem> PunchlistItems_PersonResponsible { get; set; }
        public virtual ICollection<PunchlistItem> PunchlistItems_VerifyBy { get; set; }
        public virtual ICollection<PunchlistUser> PunchlistUsers { get; set; }
        public virtual ICollection<PurchaseOrder> PurchaseOrders_ApprovedBy { get; set; }
        public virtual ICollection<PurchaseOrder> PurchaseOrders_PoContact { get; set; }
        public virtual ICollection<PurchaseOrder> PurchaseOrders_RaisedBy { get; set; }
        public virtual ICollection<PurchaseOrder> PurchaseOrders_SupplierConfirmationBy { get; set; }
        public virtual ICollection<Receipt> Receipts { get; set; }
        public virtual ICollection<RiskTemplate> RiskTemplates_ApprovedBy { get; set; }
        public virtual ICollection<RiskTemplate> RiskTemplates_Author { get; set; }
        public virtual ICollection<SiteDiary> SiteDiaries_DiaryById { get; set; }
        public virtual ICollection<SiteDiary> SiteDiaries_ReviewedById { get; set; }
        public virtual ICollection<SubcontractorUser> SubcontractorUsers { get; set; }
        public virtual ICollection<SurveyRequest> SurveyRequests_MarkedCompletedBy { get; set; }
        public virtual ICollection<SurveyRequest> SurveyRequests_RequestById { get; set; }
        public virtual ICollection<SurveyRequest> SurveyRequests_RequestToId { get; set; }
        public virtual ICollection<SurveyResultSet> SurveyResultSets { get; set; }
        public virtual ICollection<SystemUserControl> SystemUserControls { get; set; }
        public virtual ICollection<TestRequest> TestRequests_RequestedBy { get; set; }
        public virtual ICollection<TestRequest> TestRequests_TestRequestTo { get; set; }
        public virtual ICollection<TestRequestStatu> TestRequestStatus { get; set; }
        public virtual ICollection<TestRequestTest> TestRequestTests { get; set; }
        public virtual ICollection<Transmittal> Transmittals { get; set; }
        public virtual ICollection<UserGroup> UserGroups { get; set; }
        public virtual ICollection<UserRole> UserRoles { get; set; }
        public virtual ICollection<Variation> Variations { get; set; }
        public virtual ICollection<Workflow> Workflows { get; set; }
        public virtual ICollection<WorkflowActionUser> WorkflowActionUsers { get; set; }
        public virtual ICollection<WorkflowLog> WorkflowLogs { get; set; }

        public virtual ExternalApi ExternalApi { get; set; }
        public virtual Subscriber Subscriber { get; set; }

        public User()
        {
            IsPlatformAdmin = false;
            Approvals_CloseOutBy = new HashSet<Approval>();
            Approvals_DirectlyApprovedBy = new HashSet<Approval>();
            Approvals_RequestBy = new HashSet<Approval>();
            Approvals_ResponseBy = new HashSet<Approval>();
            ApprovalCcs = new HashSet<ApprovalCc>();
            ApprovalTos = new HashSet<ApprovalTo>();
            ApprovalWorkflowAddressees = new HashSet<ApprovalWorkflowAddressee>();
            Atps_RequestedBy = new HashSet<Atp>();
            Atps_SentTo = new HashSet<Atp>();
            AtpLots = new HashSet<AtpLot>();
            ChecklistUsers = new HashSet<ChecklistUser>();
            CnResponses_ActionCompletedById = new HashSet<CnResponse>();
            CnResponses_ActionRequiredById = new HashSet<CnResponse>();
            CnResponses_ResponseById = new HashSet<CnResponse>();
            CnTos = new HashSet<CnTo>();
            ContractNotices_ApproveToSendById = new HashSet<ContractNotice>();
            ContractNotices_CloseOutById = new HashSet<ContractNotice>();
            ContractNotices_RequestById = new HashSet<ContractNotice>();
            ContractNotices_RequestOnBehalfId = new HashSet<ContractNotice>();
            ContractNotices_RequestToId = new HashSet<ContractNotice>();
            Distributions = new HashSet<Distribution>();
            Incidents_ApprovedById = new HashSet<Incident>();
            Incidents_CloseoutById = new HashSet<Incident>();
            Incidents_RaisedById = new HashSet<Incident>();
            Incidents_ReportedById = new HashSet<Incident>();
            Incidents_ReportedToId = new HashSet<Incident>();
            IncidentPersons = new HashSet<IncidentPerson>();
            Instructions_ClosedOutById = new HashSet<Instruction>();
            Instructions_InstructionById = new HashSet<Instruction>();
            Instructions_InstructionToId = new HashSet<Instruction>();
            Invoices = new HashSet<Invoice>();
            Itps_ApprovedBy = new HashSet<Itp>();
            Itps_PersonControl = new HashSet<Itp>();
            Itps_RevisionById = new HashSet<Itp>();
            Lots_ConformedBy = new HashSet<Lot>();
            Lots_RaisedBy = new HashSet<Lot>();
            LotItps_ApprovedBy = new HashSet<LotItp>();
            LotItps_CheckedBy = new HashSet<LotItp>();
            LotItps_RaisedById = new HashSet<LotItp>();
            LotItps_VerifiedBy = new HashSet<LotItp>();
            LotItpDetails_ApprovedBy = new HashSet<LotItpDetail>();
            LotItpDetails_CheckedBy = new HashSet<LotItpDetail>();
            LotItpDetails_NotApplicableById = new HashSet<LotItpDetail>();
            LotItpDetails_VerifyBy = new HashSet<LotItpDetail>();
            LotItpUsers = new HashSet<LotItpUser>();
            LotQuantities_ApprovedById = new HashSet<LotQuantity>();
            LotQuantities_ManagedById = new HashSet<LotQuantity>();
            LotUsers = new HashSet<LotUser>();
            Ncrs_ApprovalBy = new HashSet<Ncr>();
            Ncrs_CloseOutBy = new HashSet<Ncr>();
            Ncrs_RaisedBy = new HashSet<Ncr>();
            Ncrs_RevisionById = new HashSet<Ncr>();
            Notifications_ActionById = new HashSet<Notification>();
            Notifications_NoticeById = new HashSet<Notification>();
            NotificationItems = new HashSet<NotificationItem>();
            NotificationTos = new HashSet<NotificationTo>();
            Personnels = new HashSet<Personnel>();
            ProgressClaimReviews_RequestedById = new HashSet<ProgressClaimReview>();
            ProgressClaimReviews_ReviewCompleteById = new HashSet<ProgressClaimReview>();
            ProgressClaimReviews_ReviewOwnerId = new HashSet<ProgressClaimReview>();
            ProgressClaimSnapshots = new HashSet<ProgressClaimSnapshot>();
            ProjectUsers = new HashSet<ProjectUser>();
            Punchlists_ApprovedBy = new HashSet<Punchlist>();
            Punchlists_PublishedById = new HashSet<Punchlist>();
            Punchlists_RaisedBy = new HashSet<Punchlist>();
            PunchlistItems_ApprovedBy = new HashSet<PunchlistItem>();
            PunchlistItems_CheckBy = new HashSet<PunchlistItem>();
            PunchlistItems_PersonResponsible = new HashSet<PunchlistItem>();
            PunchlistItems_VerifyBy = new HashSet<PunchlistItem>();
            PunchlistUsers = new HashSet<PunchlistUser>();
            PurchaseOrders_ApprovedBy = new HashSet<PurchaseOrder>();
            PurchaseOrders_PoContact = new HashSet<PurchaseOrder>();
            PurchaseOrders_RaisedBy = new HashSet<PurchaseOrder>();
            PurchaseOrders_SupplierConfirmationBy = new HashSet<PurchaseOrder>();
            Receipts = new HashSet<Receipt>();
            RiskTemplates_ApprovedBy = new HashSet<RiskTemplate>();
            RiskTemplates_Author = new HashSet<RiskTemplate>();
            SiteDiaries_DiaryById = new HashSet<SiteDiary>();
            SiteDiaries_ReviewedById = new HashSet<SiteDiary>();
            SubcontractorUsers = new HashSet<SubcontractorUser>();
            SurveyRequests_MarkedCompletedBy = new HashSet<SurveyRequest>();
            SurveyRequests_RequestById = new HashSet<SurveyRequest>();
            SurveyRequests_RequestToId = new HashSet<SurveyRequest>();
            SurveyResultSets = new HashSet<SurveyResultSet>();
            SystemUserControls = new HashSet<SystemUserControl>();
            TestRequests_RequestedBy = new HashSet<TestRequest>();
            TestRequests_TestRequestTo = new HashSet<TestRequest>();
            TestRequestStatus = new HashSet<TestRequestStatu>();
            TestRequestTests = new HashSet<TestRequestTest>();
            Transmittals = new HashSet<Transmittal>();
            UserGroups = new HashSet<UserGroup>();
            UserRoles = new HashSet<UserRole>();
            Variations = new HashSet<Variation>();
            Workflows = new HashSet<Workflow>();
            WorkflowActionUsers = new HashSet<WorkflowActionUser>();
            WorkflowLogs = new HashSet<WorkflowLog>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>

