// <auto-generated>
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using cpModel.Interfaces;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;

namespace cpModel.Models
{
    public partial class Instruction: ITrackableEntity, IReplicableEntity, ILockableEntity
    {
        public Guid? UniqueId { get; set; }
        public string HrId { get; set; }
        public int? CreatedBy { get; set; }
        public DateTime? CreatedOn { get; set; }
        public int? ModifiedBy { get; set; }
        public DateTime? ModifiedOn { get; set; }
        public bool? IsSoftDeleted { get; set; }
        public int InstructionId { get; set; }
        public int? InstructionNo { get; set; }
        public int? ProjectId { get; set; }
        public int? SiteDiaryId { get; set; }
        public bool? IsInstructionGiven { get; set; }
        public DateTime? InstructionDate { get; set; }
        public string DescriptionHtml { get; set; }
        public int? InstructionToId { get; set; }
        public int? InstructionById { get; set; }
        public int? ClosedOutById { get; set; }
        public DateTime? ClosedOutDate { get; set; }
        public string CloseOutComments { get; set; }
        public string Notes { get; set; }

        [ConcurrencyCheck]
        public int? OptimisticLockField { get; set; }

        // Reverse navigation
        public virtual ICollection<CnInstruction> CnInstructions { get; set; }
        public virtual ICollection<FsInstruction> FsInstructions { get; set; }
        public virtual ICollection<LotInstruction> LotInstructions { get; set; }
        public virtual ICollection<VrnInstruction> VrnInstructions { get; set; }

        public virtual Project Project { get; set; }
        public virtual SiteDiary SiteDiary { get; set; }
        public virtual User ClosedOutBy { get; set; }
        public virtual User InstructionBy { get; set; }
        public virtual User InstructionTo { get; set; }

        public Instruction()
        {
            CnInstructions = new HashSet<CnInstruction>();
            FsInstructions = new HashSet<FsInstruction>();
            LotInstructions = new HashSet<LotInstruction>();
            VrnInstructions = new HashSet<VrnInstruction>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>

