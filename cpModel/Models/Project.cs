// <auto-generated>
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using cpModel.Interfaces;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;

namespace cpModel.Models
{
    public partial class Project: ITrackableEntity, IReplicableEntity, ILockableEntity
    {
        public Guid? UniqueId { get; set; }
        public string HrId { get; set; }
        public int? CreatedBy { get; set; }
        public DateTime? CreatedOn { get; set; }
        public int? ModifiedBy { get; set; }
        public DateTime? ModifiedOn { get; set; }
        public bool? IsSoftDeleted { get; set; }
        public int ProjectId { get; set; }
        public string Description { get; set; }
        public string ContractNumber { get; set; }
        public string ClientContractNumber { get; set; }
        public string Location { get; set; }
        public string Principal { get; set; }
        public string PrincipalAbn { get; set; }
        public string ProjectAddress { get; set; }
        public string ClientCompany { get; set; }
        public DateTime? ProjectEnd { get; set; }
        public DateTime? ProjectStart { get; set; }
        public int? ProjectStatus { get; set; }
        public string Staff { get; set; }
        public string Superintendent { get; set; }
        public string ProjectPath { get; set; }
        public int? GuaranteedLotPeriod { get; set; }
        public int? ProjectReplicationStatus { get; set; }
        public string ContractorProjectNumber { get; set; }
        public string ContractorCompany { get; set; }
        public bool? InActive { get; set; }
        public string ContractorAddress { get; set; }
        public bool? IsRepository { get; set; }
        public string ImportAlias { get; set; }
        public int? DivisionId { get; set; }
        public int? DlSchemaLastUpdate { get; set; }
        public int? SubscriberId { get; set; }
        public decimal? Latitude { get; set; }
        public decimal? Longitude { get; set; }

        [ConcurrencyCheck]
        public int? OptimisticLockField { get; set; }

        // Reverse navigation
        public virtual ICollection<Approval> Approvals { get; set; }
        public virtual ICollection<ApprovalWorkflow> ApprovalWorkflows { get; set; }
        public virtual ICollection<AreaCode> AreaCodes { get; set; }
        public virtual ICollection<Atp> Atps { get; set; }
        public virtual ICollection<Constant> Constants { get; set; }
        public virtual ICollection<ContractNotice> ContractNotices { get; set; }
        public virtual ICollection<ContractNoticeTemplate> ContractNoticeTemplates { get; set; }
        public virtual ICollection<ControlLine> ControlLines { get; set; }
        public virtual ICollection<CostCode> CostCodes { get; set; }
        public virtual ICollection<CpDocument> CpDocuments { get; set; }
        public virtual ICollection<CustomRegister> CustomRegisters { get; set; }
        public virtual ICollection<DayCost> DayCosts { get; set; }
        public virtual ICollection<EmailLog> EmailLogs { get; set; }
        public virtual ICollection<FileStoreDoc> FileStoreDocs { get; set; }
        public virtual ICollection<ForecastVersion> ForecastVersions { get; set; }
        public virtual ICollection<Group> Groups { get; set; }
        public virtual ICollection<ImageLayer> ImageLayers { get; set; }
        public virtual ICollection<Incident> Incidents { get; set; }
        public virtual ICollection<Instruction> Instructions { get; set; }
        public virtual ICollection<Insurance> Insurances { get; set; }
        public virtual ICollection<Invoice> Invoices { get; set; }
        public virtual ICollection<Itp> Itps { get; set; }
        public virtual ICollection<KeyDate> KeyDates { get; set; }
        public virtual ICollection<Lot> Lots { get; set; }
        public virtual ICollection<LotMapSection> LotMapSections { get; set; }
        public virtual ICollection<LotMapSet> LotMapSets { get; set; }
        public virtual ICollection<Ncr> Ncrs { get; set; }
        public virtual ICollection<Notification> Notifications { get; set; }
        public virtual ICollection<Personnel> Personnels { get; set; }
        public virtual ICollection<Photo> Photos { get; set; }
        public virtual ICollection<Production> Productions { get; set; }
        public virtual ICollection<ProgressClaimVersion> ProgressClaimVersions { get; set; }
        public virtual ICollection<ProjectReport> ProjectReports { get; set; }
        public virtual ICollection<ProjectUser> ProjectUsers { get; set; }
        public virtual ICollection<Punchlist> Punchlists { get; set; }
        public virtual ICollection<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual ICollection<ReportPeriod> ReportPeriods { get; set; }
        public virtual ICollection<Resource> Resources { get; set; }
        public virtual ICollection<RiskActivity> RiskActivities { get; set; }
        public virtual ICollection<RiskTemplate> RiskTemplates { get; set; }
        public virtual ICollection<ScheduleItem> ScheduleItems { get; set; }
        public virtual ICollection<ScheduleTemplate> ScheduleTemplates { get; set; }
        public virtual ICollection<SiteDiary> SiteDiaries { get; set; }
        public virtual ICollection<Subcontractor> Subcontractors { get; set; }
        public virtual ICollection<Supplier> Suppliers { get; set; }
        public virtual ICollection<SupplierLink> SupplierLinks { get; set; }
        public virtual ICollection<SurveyRequest> SurveyRequests { get; set; }
        public virtual ICollection<Synopsis> Synopses { get; set; }
        public virtual ICollection<SystemProjectControl> SystemProjectControls { get; set; }
        public virtual ICollection<SystemUserControl> SystemUserControls { get; set; }
        public virtual ICollection<TagCode> TagCodes { get; set; }
        public virtual ICollection<Template> Templates { get; set; }
        public virtual ICollection<TestMethod> TestMethods { get; set; }
        public virtual ICollection<TestPropertyGroup> TestPropertyGroups { get; set; }
        public virtual ICollection<TestRequest> TestRequests { get; set; }
        public virtual ICollection<Transmittal> Transmittals { get; set; }
        public virtual ICollection<Unit> Units { get; set; }
        public virtual ICollection<UserInvite> UserInvites { get; set; }
        public virtual ICollection<UserRole> UserRoles { get; set; }
        public virtual ICollection<Variation> Variations { get; set; }
        public virtual ICollection<Workflow> Workflows { get; set; }
        public virtual ICollection<WorkType> WorkTypes { get; set; }

        public virtual Division Division { get; set; }
        public virtual Subscriber Subscriber { get; set; }

        public Project()
        {
            Approvals = new HashSet<Approval>();
            ApprovalWorkflows = new HashSet<ApprovalWorkflow>();
            AreaCodes = new HashSet<AreaCode>();
            Atps = new HashSet<Atp>();
            Constants = new HashSet<Constant>();
            ContractNotices = new HashSet<ContractNotice>();
            ContractNoticeTemplates = new HashSet<ContractNoticeTemplate>();
            ControlLines = new HashSet<ControlLine>();
            CostCodes = new HashSet<CostCode>();
            CpDocuments = new HashSet<CpDocument>();
            CustomRegisters = new HashSet<CustomRegister>();
            DayCosts = new HashSet<DayCost>();
            EmailLogs = new HashSet<EmailLog>();
            FileStoreDocs = new HashSet<FileStoreDoc>();
            ForecastVersions = new HashSet<ForecastVersion>();
            Groups = new HashSet<Group>();
            ImageLayers = new HashSet<ImageLayer>();
            Incidents = new HashSet<Incident>();
            Instructions = new HashSet<Instruction>();
            Insurances = new HashSet<Insurance>();
            Invoices = new HashSet<Invoice>();
            Itps = new HashSet<Itp>();
            KeyDates = new HashSet<KeyDate>();
            Lots = new HashSet<Lot>();
            LotMapSections = new HashSet<LotMapSection>();
            LotMapSets = new HashSet<LotMapSet>();
            Ncrs = new HashSet<Ncr>();
            Notifications = new HashSet<Notification>();
            Personnels = new HashSet<Personnel>();
            Photos = new HashSet<Photo>();
            Productions = new HashSet<Production>();
            ReportPeriods = new HashSet<ReportPeriod>();
            ProgressClaimVersions = new HashSet<ProgressClaimVersion>();
            ProjectReports = new HashSet<ProjectReport>();
            ProjectUsers = new HashSet<ProjectUser>();
            Punchlists = new HashSet<Punchlist>();
            PurchaseOrders = new HashSet<PurchaseOrder>();
            Resources = new HashSet<Resource>();
            RiskActivities = new HashSet<RiskActivity>();
            RiskTemplates = new HashSet<RiskTemplate>();
            ScheduleItems = new HashSet<ScheduleItem>();
            ScheduleTemplates = new HashSet<ScheduleTemplate>();
            SiteDiaries = new HashSet<SiteDiary>();
            Subcontractors = new HashSet<Subcontractor>();
            Suppliers = new HashSet<Supplier>();
            SupplierLinks = new HashSet<SupplierLink>();
            SurveyRequests = new HashSet<SurveyRequest>();
            Synopses = new HashSet<Synopsis>();
            SystemProjectControls = new HashSet<SystemProjectControl>();
            SystemUserControls = new HashSet<SystemUserControl>();
            TagCodes = new HashSet<TagCode>();
            Templates = new HashSet<Template>();
            TestMethods = new HashSet<TestMethod>();
            TestPropertyGroups = new HashSet<TestPropertyGroup>();
            TestRequests = new HashSet<TestRequest>();
            Transmittals = new HashSet<Transmittal>();
            Units = new HashSet<Unit>();
            UserInvites = new HashSet<UserInvite>();
            UserRoles = new HashSet<UserRole>();
            Variations = new HashSet<Variation>();
            Workflows = new HashSet<Workflow>();
            WorkTypes = new HashSet<WorkType>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>

